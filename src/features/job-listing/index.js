import React, { useEffect, useState } from "react";
import ProgressBar from "../../components/ProgressBar"
import ReactPaginate from "react-paginate";
import JobListingFilter from "./JobListingFilter";
import JobDetailModal from "../../components/Modal";
import { useDispatch, useSelector } from 'react-redux'
import { getJobBoardData } from "../jobSearch/jobSearchSlice";

const JobIcon = () => {
    return (
        <div className="inline-flex gap-1 relative">
            <svg width="19" height="25" viewBox="0 0 19 25" fill="none" xmlns="http://www.w3.org/2000/svg" className="mx-auto">
                <path d="M18.8924 12.1163C18.8924 15.5994 18.8931 19.0833 18.8924 22.5664C18.8924 23.4344 18.4137 24.0513 17.6126 24.2128C17.4833 24.2389 17.3468 24.2346 17.2139 24.2353C12.0331 24.236 6.85239 24.2353 1.67165 24.2353C0.655513 24.2353 0.00166736 23.593 0.00095278 22.584C-0.00119097 19.1446 0.00095278 15.7052 0.00095278 12.2657C0.00095278 8.73818 0.00095278 5.21061 0.00095278 1.68375C0.00095278 0.806623 0.467576 0.196015 1.26863 0.0260884C1.38868 0.000705148 1.51658 0.00141021 1.64021 0.00141021C6.82952 3.2308e-08 12.0195 0 17.2089 0C18.2422 0 18.891 0.639516 18.8917 1.66542C18.8931 5.14857 18.8917 8.63241 18.8924 12.1156V12.1163ZM0.662659 12.1029H0.664081C0.664081 13.3516 0.664081 14.601 0.664081 15.8497C0.664081 18.0489 0.65765 20.2474 0.673371 22.4465C0.675515 22.7145 0.744833 23.0092 0.874173 23.2419C1.04139 23.5415 1.37724 23.5972 1.71524 23.5972C5.62902 23.5944 9.54351 23.5951 13.4573 23.5951C14.7235 23.5951 15.9891 23.5972 17.2553 23.5937C17.8063 23.5923 18.1407 23.2962 18.2071 22.7638C18.2236 22.6334 18.2257 22.5008 18.2257 22.369C18.2271 17.3819 18.2279 12.3948 18.2279 7.40767C18.2279 5.53425 18.2286 3.66083 18.2264 1.7874C18.2264 1.49691 18.2236 1.20359 18.0142 0.963858C17.792 0.710025 17.504 0.638811 17.1753 0.638811C12.0217 0.641632 6.86883 0.640221 1.71524 0.640221C1.65307 0.640221 1.59019 0.638106 1.52802 0.643042C1.07354 0.676181 0.753405 0.970909 0.691951 1.41935C0.672657 1.55825 0.663374 1.69927 0.663374 1.83958C0.661945 5.26138 0.661944 8.68248 0.661944 12.1043L0.662659 12.1029Z" fill="#C1BBBB" />
                <path d="M4.54719 7.15756C4.55076 4.49726 6.75526 2.36577 9.46639 2.35308C12.1532 2.34039 14.4013 4.59315 14.352 7.2739C14.307 9.73325 12.3154 12.0382 9.4278 12.0269C6.5323 12.0156 4.50003 9.6705 4.54719 7.15686V7.15756ZM12.8907 9.59365C13.9997 8.26244 14.0898 5.7911 12.4055 4.1842C10.684 2.54275 7.95004 2.62031 6.34223 4.32663C4.75013 6.01743 4.98952 8.44294 6.00851 9.59153C6.67951 9.20726 7.3405 8.82862 7.96505 8.47114C7.77497 8.14821 7.48913 7.81753 7.38409 7.43819C7.27619 7.04898 7.29334 6.60477 7.35194 6.19793C7.41125 5.78475 7.67993 5.44701 7.99863 5.16145C8.74966 4.4888 9.95803 4.44156 10.7827 5.06838C11.2078 5.39131 11.488 5.81789 11.5866 6.33754C11.7459 7.1773 11.4808 7.89227 10.8755 8.4373C11.5565 8.82792 12.2125 9.20373 12.89 9.59224L12.8907 9.59365ZM9.19842 8.97387C8.3888 8.97669 7.47198 9.32571 6.67022 9.98991C6.50944 10.1232 6.50229 10.2127 6.67236 10.3594C8.2323 11.6983 10.614 11.7124 12.1918 10.3819C12.4198 10.1894 12.4241 10.1584 12.1882 9.96382C11.3929 9.30808 10.4775 8.97246 9.19771 8.97458L9.19842 8.97387ZM9.46997 5.28343C8.59746 5.28132 7.92646 5.91872 7.92289 6.75425C7.9186 7.62151 8.5753 8.28782 9.43637 8.28923C10.2974 8.29135 10.9685 7.63984 10.9706 6.80079C10.9727 5.94551 10.3203 5.28555 9.47068 5.28343H9.46997Z" fill="#C1BBBB" />
                <path d="M9.4507 17.2141C7.47201 17.2141 5.49404 17.2141 3.51535 17.2141C2.87151 17.2141 2.56639 16.9145 2.56496 16.2813C2.56425 15.8505 2.56282 15.4197 2.56568 14.9889C2.56925 14.5207 2.87509 14.1942 3.34814 14.1519C3.41889 14.1456 3.49034 14.1498 3.5618 14.1498C7.48273 14.1498 11.4044 14.1498 15.3253 14.1498C16.037 14.1498 16.3279 14.4368 16.3286 15.1412C16.3286 15.5106 16.3286 15.8794 16.3286 16.2489C16.3286 16.9201 16.032 17.2155 15.3582 17.2155C13.3888 17.2155 11.4194 17.2155 9.44998 17.2155L9.4507 17.2141ZM9.44927 16.5704C11.4015 16.5704 13.3538 16.5704 15.306 16.5704C15.6383 16.5704 15.6754 16.5351 15.6776 16.2376C15.6797 15.9125 15.6783 15.5868 15.6783 15.2617C15.6783 14.8041 15.6712 14.7971 15.1931 14.7971C11.3779 14.7971 7.56276 14.7971 3.74759 14.7971C3.65827 14.7971 3.56966 14.7978 3.48034 14.8006C3.29669 14.807 3.2088 14.8923 3.21308 15.0834C3.22094 15.4352 3.21452 15.787 3.21523 16.1389C3.21523 16.5591 3.22809 16.5725 3.64613 16.5725C5.58051 16.5725 7.51489 16.5725 9.44927 16.5725V16.5704Z" fill="#C1BBBB" />
                <path d="M9.44642 18.8441C10.8199 18.8441 12.1926 18.8434 13.566 18.8441C14.1184 18.8441 14.4492 19.1677 14.4521 19.7085C14.4542 20.1393 14.4542 20.5708 14.4521 21.0016C14.4499 21.5643 14.1405 21.8752 13.5531 21.8788C12.3941 21.8858 11.235 21.8809 10.0753 21.8809C8.55034 21.8809 7.02541 21.8809 5.50049 21.8809C4.70158 21.8809 4.44005 21.6242 4.44005 20.8451C4.44005 20.458 4.43719 20.0709 4.44076 19.6838C4.44576 19.1769 4.78305 18.8455 5.29898 18.8448C6.68099 18.8434 8.06299 18.8448 9.44571 18.8441H9.44642ZM9.44571 21.2223C10.7906 21.2223 12.1361 21.2188 13.481 21.2259C13.7068 21.2273 13.8097 21.1596 13.804 20.9276C13.7947 20.5412 13.799 20.1541 13.8025 19.7677C13.804 19.5689 13.7139 19.4808 13.5103 19.4843C13.1716 19.4906 12.8336 19.4857 12.4948 19.4857C10.1517 19.4857 7.80931 19.4857 5.46619 19.4857C5.13534 19.4857 5.09532 19.521 5.09246 19.8185C5.08889 20.1612 5.09032 20.5038 5.09246 20.8465C5.09389 21.2075 5.10818 21.2223 5.46404 21.2223C6.79103 21.2223 8.11872 21.2223 9.44571 21.2223Z" fill="#C1BBBB" />
            </svg>
            <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg" className="absolute right-[-10px] bottom-[-5px]">
                <path d="M17.1397 7.23725C16.9724 6.13669 16.607 5.10584 16.023 4.15534C15.6203 3.50051 15.156 2.88963 14.5841 2.36533C13.934 1.76954 13.2326 1.24568 12.4245 0.871873C11.5102 0.420374 10.5469 0.137577 9.52693 0.0492307C9.47249 0.0412396 9.41805 0.0319166 9.36316 0.0252573C8.95282 -0.0235773 8.54294 0.0119388 8.1326 0.0203739C7.69032 0.0292529 7.25794 0.0856347 6.8296 0.186412C6.37562 0.258332 5.94054 0.395513 5.51446 0.560219C4.89356 0.800397 4.29875 1.09074 3.75928 1.48275C3.73993 1.49296 3.71879 1.50095 3.70079 1.51383C1.35981 3.18664 0.102701 5.44502 0.00506607 8.29741C-0.0610736 10.2308 0.521585 11.9849 1.6833 13.5449C2.26911 14.3316 2.9692 15.0046 3.80112 15.5391C4.32979 15.9174 4.91065 16.1993 5.51671 16.4315C5.98598 16.6113 6.46471 16.7627 6.96593 16.8328C7.00103 16.8666 7.04692 16.8608 7.09056 16.8697C7.37267 16.9265 7.66377 16.9252 7.94273 17.0006H9.28937C9.39195 16.9323 9.51974 16.9833 9.62637 16.9323C9.91882 16.9221 10.2041 16.8617 10.488 16.7982C11.2389 16.6299 11.9624 16.3866 12.6355 16.0106C13.1277 15.7549 13.5979 15.4654 14.0262 15.1138C14.6003 14.6428 15.1259 14.1256 15.5645 13.5267C16.5026 12.2464 17.0601 10.8244 17.2014 9.24746C17.2041 9.21594 17.196 9.17954 17.2347 9.16134V7.83259C17.1631 7.6408 17.1708 7.43614 17.1406 7.23769L17.1397 7.23725ZM12.5883 13.2244C12.456 13.2834 12.321 13.3371 12.1923 13.4028C12.0969 13.4517 12.0416 13.4335 11.9669 13.3553C11.346 12.7032 10.5685 12.3343 9.69206 12.1505C9.67046 12.146 9.64751 12.1482 9.62547 12.1474C9.1247 12.0217 8.61537 12.0244 8.10695 12.0661C7.70472 12.099 7.31013 12.1802 6.93219 12.3263C6.30184 12.5389 5.74977 12.8768 5.28364 13.3451C5.19186 13.4375 5.12527 13.4472 5.01324 13.3895C4.79997 13.2803 4.5804 13.1822 4.35904 13.0899C4.2551 13.0464 4.24386 13.0104 4.31405 12.9212C4.72483 12.4 5.24 12.0022 5.82266 11.6896C6.23434 11.4685 6.68338 11.338 7.13376 11.2146C7.75466 11.0743 8.38456 11.0353 9.01941 11.0521C9.01941 10.6885 9.01941 10.3254 9.01941 9.96178C8.34947 10.0364 7.72406 9.92271 7.1666 9.52848C6.77291 9.23015 6.46831 8.86078 6.27349 8.40928C6.16326 8.15445 6.10162 7.88631 6.10117 7.60617C6.09982 6.9984 6.06877 6.38886 6.10117 5.78286C6.12681 5.31316 6.31893 4.88209 6.61589 4.50695C6.71532 4.38131 6.8305 4.26721 6.93848 4.14823C7.71326 3.52537 8.57803 3.39307 9.52108 3.6883C10.1892 3.96977 10.6801 4.42659 10.9523 5.09918C11.0549 5.35312 11.1192 5.61727 11.1233 5.88897C11.1327 6.51316 11.162 7.13825 11.1093 7.76111C11.0207 8.81505 10.2315 9.69008 9.18094 9.92316C9.1265 9.93514 9.07295 9.9489 9.01851 9.96222C9.01851 10.3258 9.01851 10.689 9.01851 11.0526C9.52468 11.1094 10.0277 11.1778 10.5159 11.3323C11.2074 11.5511 11.8292 11.8912 12.3849 12.3511C12.3934 12.3258 12.3997 12.3001 12.4042 12.2743C12.3993 12.3001 12.393 12.3258 12.3849 12.3511C12.5919 12.5656 12.8132 12.7671 12.9878 13.0286C12.8497 13.0965 12.7183 13.1609 12.5874 13.2253L12.5883 13.2244Z" fill="#1E1E1E" />
            </svg>
        </div>
    )
}

const GlobIcon = () => {
    return (
        <svg width="20" height="20" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.00211474 14.5539V12.7077C0.0585078 12.6442 0.0859994 12.5491 0.195261 12.5371C0.311572 12.6886 0.279851 12.9481 0.449735 13.0362C0.678832 13.1553 0.781749 13.3407 0.865634 13.5536C0.989698 13.868 1.13914 14.176 1.38727 14.3995C1.70166 14.6829 1.65584 15.0212 1.61637 15.3688C1.60297 15.4893 1.55856 15.6077 1.51909 15.724C1.4627 15.8911 1.44507 16.0497 1.57689 16.1928C1.65937 16.2816 1.62905 16.3613 1.56773 16.4515C1.35625 16.7624 1.34568 16.89 1.5924 17.1762C1.93922 17.578 2.15492 18.0404 2.32551 18.5339C2.44182 18.8694 2.61593 19.1732 2.87816 19.42C3.36455 19.8782 3.68035 20.4287 3.82979 21.085C3.96866 21.6954 4.20199 22.2735 4.52554 22.8135C4.99784 23.6002 5.59349 24.2712 6.3562 24.7872C6.51128 24.8916 6.67271 25.0142 6.88136 24.8881C6.86656 24.8634 6.86092 24.8429 6.84894 24.8366C6.77915 24.7999 6.70725 24.7675 6.63605 24.7323C6.20958 24.5187 5.93608 24.1824 5.82893 23.7165C5.76478 23.4373 5.86347 23.1596 6.08411 23.1279C6.3703 23.0877 6.38863 22.9636 6.23355 22.6986C6.55851 22.817 6.59446 22.6203 6.64381 22.4335C6.71078 22.179 6.79748 21.9288 6.84823 21.6708C6.9152 21.331 7.11751 21.1548 7.446 21.0934C7.84428 21.0201 8.04941 20.7572 8.11496 20.3758C8.14739 20.1862 8.16713 19.9931 8.17418 19.8006C8.19462 19.236 8.34124 18.7094 8.62109 18.2202C8.88896 17.7514 8.85935 17.6428 8.38706 17.3644C8.1636 17.2333 7.89926 17.1508 7.80974 16.8597C7.7766 16.7525 7.66452 16.7828 7.58064 16.7751C7.34449 16.7539 7.04561 16.8188 6.8863 16.6982C6.58883 16.4727 6.3414 16.2351 5.9396 16.4142C5.7676 16.1477 5.56388 16.2697 5.34254 16.4121C5.35875 16.2386 5.41585 16.1562 5.54485 16.1301C5.60688 16.1174 5.65763 16.0984 5.68654 16.0307C5.89378 15.5556 5.63226 14.9952 5.13036 14.8528C4.98726 14.8119 4.83853 14.7914 4.69402 14.7541C4.46915 14.6963 4.23794 14.623 4.12022 14.4115C3.83402 13.8962 3.36032 13.6889 2.826 13.5472C2.57434 13.4803 2.37697 13.5219 2.20497 13.7066C2.06751 13.8546 1.89622 13.9349 1.70096 13.9702C1.51838 14.0033 1.39996 13.9512 1.35555 13.7524C1.31325 13.5635 1.27378 13.3752 1.27307 13.1807C1.27307 13.0235 1.2336 12.8825 1.10248 12.7859C0.971371 12.6894 0.950223 12.5723 0.980534 12.4158C1.02283 12.2015 1.03693 11.9809 1.05878 11.7631C1.06442 11.7046 1.0764 11.632 0.996747 11.6087C0.929076 11.589 0.881847 11.6355 0.836732 11.6792C0.757782 11.7567 0.733815 11.8611 0.696454 11.959C0.661914 12.0486 0.628783 12.1395 0.584373 12.2248C0.546308 12.2981 0.482161 12.3587 0.394047 12.3334C0.28126 12.3009 0.330604 12.2072 0.341883 12.1346C0.432817 11.5594 0.580849 11.0004 0.831093 10.4731C0.885371 10.3575 0.881847 10.1192 1.1335 10.256C1.16875 10.275 1.19765 10.239 1.20258 10.1996C1.24699 9.84428 1.52966 9.80269 1.79964 9.75334C2.04989 9.70752 2.24092 9.5891 2.35723 9.35929C2.46508 9.14429 2.60184 8.95608 2.80908 8.82214C2.94019 8.73755 2.99024 8.61278 2.93526 8.45629C2.83798 8.18066 2.97473 7.99456 3.21018 7.91349C3.68599 7.74995 3.98558 7.4271 4.19353 6.98511C4.29574 6.76799 4.45858 6.59035 4.69825 6.50717C4.79835 6.47263 4.90408 6.46206 4.90126 6.61362C4.89703 6.82086 5.01475 6.81875 5.16067 6.77998C5.35241 6.72993 5.52088 6.63758 5.65059 6.48673C5.79862 6.31473 5.77395 6.24565 5.55119 6.18502C5.45814 6.15965 5.32492 6.19489 5.33196 6.02641C5.33901 5.853 5.26077 5.86076 5.14023 5.93548C5.0782 5.97425 5.01828 6.03699 4.92241 6.01091C4.89985 5.80436 5.0077 5.70779 5.1938 5.66126C5.40951 5.60769 5.61041 5.67325 5.81554 5.72048C5.88603 5.73669 6.0115 5.81353 6.01855 5.67043C6.02489 5.54143 6.10878 5.53438 6.1828 5.50054C6.50565 5.35251 6.78761 5.14244 7.05548 4.91546C7.10553 4.87316 7.27189 4.76672 7.07028 4.69693C6.66989 4.55806 6.63958 4.51717 6.70796 4.06532C6.72135 4.05333 6.73545 4.04205 6.74884 4.03078C6.73122 4.03783 6.7143 4.04558 6.69668 4.05263C6.52679 4.05051 6.37101 4.11607 6.20958 4.15484C6.09609 4.18233 6.01644 4.19291 5.99952 4.02796C5.97696 3.81013 5.83245 3.81507 5.67173 3.89755C5.54062 3.96451 5.46237 4.08294 5.38131 4.19714C5.29813 4.31416 5.20579 4.43188 5.06551 4.46148C4.94074 4.48757 4.89492 4.55171 4.85474 4.65816C4.82513 4.73711 4.76944 4.81113 4.71023 4.87386C4.44236 5.15795 4.08497 5.36661 3.96937 5.77617C3.95738 5.81917 3.91791 5.85371 3.86997 5.84384C3.82063 5.83397 3.81358 5.78604 3.80512 5.74092C3.78045 5.6084 3.86363 5.49208 3.87773 5.3511C3.65568 5.37366 3.41812 5.40679 3.34622 5.16429C3.26939 4.90629 3.53232 4.86188 3.6874 4.77165C4.20551 4.47276 4.69895 4.13863 5.16067 3.75797C5.24526 3.68818 5.36792 3.62051 5.27557 3.48094C5.19239 3.35546 5.07256 3.3611 4.9492 3.42243C4.72715 3.5338 4.54528 3.70017 4.34861 3.8475C4.13291 4.00892 3.95456 4.22181 3.69375 4.3212C3.67542 4.19079 3.7875 4.14074 3.85588 4.06955C4.58335 3.31246 5.394 2.65759 6.28219 2.09717C8.90024 0.448355 11.758 -0.223437 14.8293 0.0648769C17.221 0.289043 19.402 1.11662 21.3554 2.52294C22.068 3.03613 22.7483 3.58949 23.315 4.26834C23.1515 4.30993 23.0196 4.22604 22.909 4.1344C22.3831 3.69805 21.8001 3.58244 21.1516 3.79181L21.1545 3.79463C21.2043 3.47177 21.072 3.22904 20.7576 3.06644C20.5778 2.9741 20.3981 2.88175 20.212 2.80209C19.7164 2.58921 19.2004 2.47853 18.6717 2.63291C18.2685 2.75063 17.878 2.91347 17.4875 3.06997C17.2718 3.15597 17.0956 3.31034 17.1294 3.56482C17.166 3.83974 17.398 3.84468 17.6179 3.85173C17.7969 3.85736 17.9957 3.88204 18.0416 4.08999C18.0909 4.31557 17.8632 4.31698 17.7349 4.3783C17.0251 4.72019 16.311 5.05292 15.5701 5.40185C15.8535 5.58795 16.06 5.79168 16.0967 6.11876C16.1207 6.33165 16.0424 6.41835 15.8309 6.36619C15.6857 6.33094 15.5426 6.28724 15.3974 6.25269C15.0795 6.17727 14.8257 6.30063 14.6234 6.53325C14.4275 6.75883 14.3866 7.02459 14.5177 7.29528C14.6573 7.5843 14.8807 7.75771 15.2219 7.75912C15.5067 7.76053 15.7689 7.628 16.0537 7.63575C16.1362 7.63787 16.1348 7.55751 16.1573 7.50323C16.3688 6.99568 16.7628 6.67071 17.2422 6.44161C17.6073 6.2675 17.9605 6.31755 18.2805 6.5678C18.5709 6.79478 18.8663 7.01754 19.1483 7.25439C19.2829 7.36788 19.3908 7.42357 19.5169 7.25439C19.6107 7.12891 19.7044 7.1557 19.7954 7.26426C19.8405 7.31783 19.892 7.36647 19.942 7.41582C20.052 7.52438 20.1281 7.72035 20.3403 7.54975C20.4037 7.499 20.4439 7.56879 20.4749 7.6273C20.5144 7.70131 20.513 7.80071 20.6039 7.84723C20.6504 7.60803 20.8043 7.46657 21.0656 7.42287C21.4421 7.36013 21.6119 7.07534 21.4505 6.76517C21.373 6.61644 21.2954 6.47052 21.478 6.35138C21.6599 6.23296 21.834 6.2682 21.9707 6.43175C22.0518 6.52832 22.1124 6.64181 22.1864 6.75319C22.2936 6.61714 22.2309 6.43457 22.3627 6.29851C22.5608 6.75601 22.7976 7.17051 23.131 7.585C23.0112 7.57654 22.959 7.57654 22.9083 7.56879C22.4191 7.49407 21.9468 7.57372 21.4801 7.71471C21.299 7.76899 21.2961 7.843 21.4336 7.9565C21.6465 8.13273 21.8862 8.21943 22.1639 8.18982C22.3754 8.16656 22.5593 8.2011 22.6108 8.44571C22.6601 8.67763 22.6968 8.91167 22.7327 9.1457C22.7511 9.26624 22.7405 9.36423 22.5692 9.29021C22.314 9.17954 22.0419 9.16755 21.7677 9.16967C21.2609 9.17319 20.7682 9.13019 20.4277 8.67199C20.2881 8.8306 20.2437 8.99626 20.2465 9.17742C20.2486 9.30924 20.1908 9.34942 20.0647 9.31206C19.7305 9.21337 19.4091 9.09213 19.2181 8.77562C19.1574 8.67481 19.0855 8.66001 18.9812 8.65719C18.5688 8.64662 18.3602 8.49435 18.2608 8.1003C18.1959 7.84582 18.0521 7.78731 17.8139 7.82115C17.4142 7.87754 17.011 7.90786 16.612 7.96495C16.0918 8.03968 15.5581 8.03615 15.0584 8.22507C14.7031 8.35901 14.4232 8.58529 14.3563 8.97722C14.3274 9.14641 14.2533 9.23734 14.1215 9.32545C13.5555 9.70329 13.1135 10.1967 12.7984 10.8016C12.6835 11.0215 12.6377 11.2485 12.7618 11.4818C12.9084 11.7574 12.9056 12.0352 12.7871 12.32C12.5644 12.855 12.6772 13.3513 12.9676 13.8264C13.208 14.219 13.5174 14.5553 13.8353 14.8838C14.2259 15.2877 14.6643 15.3927 15.1972 15.1453C15.7189 14.9028 16.2863 14.8091 16.8587 14.7717C17.0265 14.7604 17.221 14.6984 17.2344 14.9952C17.2401 15.1143 17.3782 15.1862 17.5157 15.1911C17.6038 15.1939 17.6919 15.1925 17.7793 15.201C18.2199 15.244 18.4159 15.4978 18.3418 15.9355C18.3228 16.0476 18.2869 16.1569 18.258 16.2675C18.2417 16.331 18.2206 16.4001 18.3285 16.3796C18.5399 16.3401 18.4349 16.4649 18.4187 16.5467C18.4039 16.6214 18.3165 16.6891 18.4405 16.7694C18.9784 17.1177 19.1476 17.5385 18.9875 18.1546C18.9128 18.4429 18.8071 18.7242 18.6985 19.0019C18.5019 19.5038 18.4737 20.0022 18.6478 20.5196C18.8853 21.2274 19.101 21.9422 19.3287 22.6534C19.4704 23.0968 19.6227 23.1448 20.0195 22.8769C20.0703 22.8424 20.1232 22.8092 20.1676 22.7662C20.6117 22.3362 21.0748 21.9478 21.693 21.7716C21.9637 21.6947 22.0271 21.4861 21.9221 21.2217C21.8692 21.0885 21.9249 21.0519 22.0166 21.0011C22.2175 20.8904 22.3493 20.7057 22.3415 20.49C22.3288 20.1432 22.4994 19.8916 22.6714 19.6244C22.8138 19.4037 22.9449 19.1725 23.0535 18.9336C23.7936 17.3101 24.3893 15.6275 25.059 13.9751C25.0766 13.9314 25.1175 13.8814 25.054 13.8186C24.8454 13.8891 24.6015 13.9124 24.4372 13.7587C23.9438 13.2977 23.4757 12.7796 23.2791 12.1353C23.1402 11.6806 23.0274 11.2302 22.7793 10.8206C22.6334 10.5795 22.5847 10.3138 22.6242 10.0346C22.6348 9.95848 22.6376 9.85697 22.7264 9.84076C22.8103 9.82525 22.8216 9.92817 22.854 9.98456C23.3242 10.7995 23.745 11.6404 24.1532 12.4877C24.2589 12.707 24.3576 12.9297 24.4774 13.1906C24.6614 12.8825 24.9222 12.7591 25.2056 12.652C25.6081 12.5004 25.8562 12.1057 25.8393 11.7088C25.8224 11.3155 25.5545 10.963 25.1605 10.8178C25.0449 10.7755 24.9264 10.7424 24.813 10.6951C24.6417 10.6239 24.5098 10.5083 24.4894 10.3131C24.4788 10.2101 24.5324 10.1171 24.6325 10.0832C24.8101 10.0233 24.9793 10.0543 25.128 10.1742C25.1626 10.2017 25.1964 10.2299 25.2281 10.2595C25.3578 10.38 25.5016 10.4801 25.6631 10.5534C26.0353 10.7226 26.2749 11.0145 26.435 11.381C26.6337 11.8371 26.7078 12.3249 26.7931 12.8078C26.8614 13.1955 27.0186 13.5684 26.9982 13.9709C26.9354 15.2214 26.7465 16.4515 26.3511 17.6428C25.2916 20.8298 23.3228 23.3041 20.4657 25.0601C18.9283 26.0046 17.2556 26.5989 15.4644 26.8477C15.0577 26.9041 14.6495 26.9499 14.2414 27H12.3952C12.176 26.8971 11.9363 26.9189 11.7058 26.8858C8.7226 26.4544 6.14261 25.2017 3.99968 23.0757C1.96107 21.0526 0.69434 18.622 0.194556 15.7903C0.12195 15.3779 0.12336 14.955 0 14.5518L0.00211474 14.5539ZM8.55906 1.82014C8.74234 1.88287 8.90306 1.79617 9.06942 1.76797C9.25833 1.73555 9.64251 2.1437 9.59035 2.32416C9.56779 2.40311 9.50928 2.46162 9.4402 2.5018C9.38028 2.53704 9.31332 2.56031 9.24776 2.58498C9.04263 2.66181 8.88402 2.77319 8.9242 3.02696C8.96227 3.26875 9.1681 3.42877 9.42822 3.43582C9.75177 3.44498 9.97593 3.26805 10.1698 3.04388C10.3904 2.7887 10.6463 2.63714 10.9974 2.68014C11.1313 2.69636 11.2702 2.6604 11.371 2.57511C11.8362 2.18176 12.3818 2.12537 12.9577 2.16061C13.184 2.17471 13.4152 2.1726 13.6337 2.03302C13.5294 1.94561 13.4025 1.89556 13.3482 1.76515C13.2996 1.64813 13.301 1.59174 13.4533 1.5861C14.0193 1.56566 14.4091 1.15892 14.8871 0.931228C14.8046 0.896687 14.7306 0.887523 14.6566 0.889637C13.3137 0.926998 11.9708 0.965064 10.628 1.00524C9.84552 1.02851 9.16176 1.30766 8.55976 1.82014H8.55906ZM23.8035 20.6726C24.2349 20.6726 24.4513 20.471 24.4753 20.0558C24.483 19.9247 24.4732 19.7922 24.4859 19.6617C24.5134 19.3643 24.5324 19.064 24.8397 18.8884C24.956 18.8222 24.9673 18.7066 24.9004 18.5903C24.8482 18.4993 24.7932 18.4098 24.7389 18.3196C24.7093 18.2702 24.6973 18.1913 24.6128 18.2195C24.5493 18.2406 24.5204 18.2949 24.5176 18.3626C24.5056 18.7228 24.3223 18.947 23.9783 19.0506C23.8514 19.0893 23.7415 19.1831 23.7929 19.3227C23.9149 19.6519 23.7598 19.8746 23.5483 20.0903C23.4306 20.2102 23.37 20.3617 23.4313 20.5232C23.499 20.7008 23.6724 20.6634 23.8021 20.6719L23.8035 20.6726ZM7.28598 2.65054C7.1013 2.67309 6.89335 2.69706 6.82709 2.89585C6.76505 3.07983 6.69033 3.18769 6.49084 3.24197C6.34633 3.28144 6.28219 3.44217 6.37806 3.58808C6.44502 3.6903 6.54089 3.81789 6.68751 3.66069C6.7425 3.60148 6.82004 3.62263 6.88771 3.62756C7.13302 3.64448 7.28105 3.54438 7.28598 3.28849C7.2888 3.15103 7.3459 3.09816 7.47772 3.10662C7.64549 3.1172 7.65888 3.01216 7.64549 2.88246C7.62152 2.65688 7.43754 2.68367 7.28739 2.65054H7.28598ZM7.20351 5.56187C6.84118 5.50618 6.53948 5.3652 6.27584 5.63166C6.22086 5.68735 6.08693 5.70285 6.13345 5.81846C6.17152 5.91292 6.27655 5.94464 6.37383 5.9531C6.69879 5.97989 6.92507 5.79379 7.20351 5.56187ZM12.4826 3.00723C12.8344 3.08759 13.1107 3.07279 13.38 2.94872C13.4674 2.90854 13.5724 2.84791 13.5315 2.73583C13.4942 2.63291 13.3743 2.63009 13.2792 2.64913C13.0099 2.702 12.7801 2.84228 12.4826 3.00793V3.00723Z" fill="currentColor" />
        </svg>
    )
}
const ShareIcon = () => {
    return (
        <svg width="20" height="19" viewBox="0 0 26 27" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.6096 26.1199C8.93444 26.1199 6.2593 26.1228 3.58417 26.1191C1.9929 26.1169 0.653873 25.1585 0.190085 23.663C0.074502 23.2893 0.0105283 22.8821 0.00980138 22.4906C-0.00182965 16.9936 -0.00255712 11.4965 0.00471227 6.00022C0.00762003 3.93855 1.54582 2.38357 3.56235 2.38209C6.61841 2.37912 9.67446 2.3806 12.7305 2.38209C13.339 2.38209 13.8296 2.78922 13.9183 3.35311C14.0114 3.94078 13.7082 4.49427 13.1674 4.67555C12.9828 4.73722 12.7763 4.75505 12.58 4.75579C9.58723 4.76025 6.59515 4.75802 3.60234 4.75951C2.93792 4.75951 2.48939 5.09532 2.36 5.69041C2.3331 5.81523 2.33092 5.94747 2.33092 6.07674C2.32946 11.527 2.32947 16.978 2.3302 22.4282C2.3302 23.2588 2.80052 23.7417 3.61106 23.7417C8.95261 23.7417 14.2934 23.7425 19.635 23.7417C20.4317 23.7417 20.8999 23.264 20.9006 22.4438C20.9028 19.3851 20.9006 16.3256 20.905 13.267C20.905 13.0656 20.9209 12.8554 20.9805 12.6659C21.1514 12.1236 21.6726 11.816 22.2454 11.8918C22.7594 11.9594 23.181 12.4222 23.2239 12.9668C23.229 13.0314 23.2275 13.0968 23.2275 13.1615C23.2275 16.2855 23.2312 19.4089 23.2261 22.5329C23.2232 24.2833 22.0448 25.7328 20.3663 26.0552C20.101 26.1065 19.8254 26.1169 19.5543 26.1176C16.9061 26.1221 14.2585 26.1206 11.6103 26.1206L11.6096 26.1199Z" fill="currentColor" />
            <path d="M19.3011 4.78547C18.3728 3.83896 17.5019 2.95931 16.6412 2.07001C16.0386 1.44742 16.1724 0.493483 16.9138 0.136127C17.0883 0.0521743 17.2969 0.0083406 17.4903 0.00759766C19.7758 -0.00131767 22.0606 -0.00280355 24.3461 0.00536883C25.0585 0.00759766 25.547 0.50537 25.5492 1.2342C25.5579 3.57001 25.555 5.90583 25.5506 8.24238C25.5499 8.78176 25.3238 9.19632 24.8229 9.40658C24.3214 9.61757 23.8845 9.47864 23.5094 9.09528C22.7083 8.27582 21.9065 7.45635 21.1047 6.63763C21.0421 6.57373 20.976 6.51281 20.8662 6.40583C20.7942 6.5039 20.7375 6.60196 20.6612 6.67997C17.9563 9.44744 15.2492 12.2119 12.5457 14.9809C12.2251 15.3093 11.8674 15.5002 11.4015 15.4096C10.5495 15.2431 10.1707 14.2313 10.7 13.5277C10.7712 13.4326 10.8563 13.3479 10.9391 13.2625C13.6317 10.5091 16.325 7.75576 19.0198 5.00464C19.0961 4.92663 19.1928 4.86942 19.3004 4.78621L19.3011 4.78547Z" fill="currentColor" />
        </svg>
    )
}
const BookmarkIcon = () => {
    return (
        <svg width="20" height="19" viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M13.7722 1.32537C13.8608 1.12931 14.1392 1.12931 14.2278 1.32537L17.5396 8.65388C17.7942 9.21729 18.3272 9.60454 18.9417 9.67259L26.9349 10.5576C27.1488 10.5813 27.2348 10.8461 27.0757 10.991L21.1293 16.4053C20.6722 16.8215 20.4686 17.4481 20.5937 18.0536L22.2221 25.9291C22.2656 26.1398 22.0404 26.3035 21.8534 26.1969L14.8666 22.2146C14.3294 21.9085 13.6706 21.9085 13.1334 22.2146L6.14657 26.1969C5.95964 26.3035 5.73438 26.1398 5.77795 25.9291L7.40625 18.0536C7.53144 17.4481 7.32784 16.8215 6.87068 16.4053L0.924257 10.991C0.765168 10.8461 0.851208 10.5813 1.06506 10.5576L9.05827 9.67259C9.67279 9.60454 10.2058 9.21729 10.4604 8.65388L13.7722 1.32537Z" stroke="currentColor" stroke-width="1.5" />
        </svg>
    )
}

const ArrowRight = () => {
    return (
        <svg width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.00224 5.64428C6.90021 5.50966 6.85201 5.4274 6.78628 5.36196C5.12178 3.69613 3.45416 2.03342 1.79092 0.366338C1.47667 0.0509956 1.11673 -0.0805011 0.686678 0.0597204C0.0181257 0.278466 -0.215993 1.09424 0.225953 1.64204C0.279787 1.70873 0.342386 1.76793 0.403107 1.82838C2.32926 3.75035 4.25605 5.67294 6.18283 7.59429C6.72368 8.13399 7.2758 8.13523 7.81477 7.59803C9.75282 5.66547 11.6896 3.73103 13.6289 1.80034C13.8737 1.55666 14.0258 1.28432 13.9964 0.929718C13.9638 0.537097 13.766 0.253538 13.4111 0.0946206C13.0468 -0.0686596 12.695 -0.0175567 12.377 0.224248C12.2968 0.285322 12.2273 0.36073 12.156 0.432399C10.5115 2.07455 8.86768 3.7167 7.22509 5.36009C7.15936 5.42553 7.10929 5.50655 7.00162 5.64428L7.00224 5.64428Z" fill="#919191" />
        </svg>
    )
}

const JobListing = () => {

    const dispatch = useDispatch()
    const [modal, setModal] = useState(false)
    // const [currentPage, setCurrentPage] = useState(0); //Pagination
    const [currentItem, setCurrentItem] = useState(0); //Pagination
    const { jobBoardData, jobListPageData } = useSelector(state => state.jobSearch)



    useEffect(() => {
        dispatch(getJobBoardData())
    }, [])

    const PER_PAGE = 10;
    const [currentPage, setCurrentPage] = useState(0);
    const [offset, setOffset] = useState(0);
    const pageCount = Math.ceil(jobBoardData?.length / PER_PAGE);
    const getPaginatedJobs = () => { return jobBoardData?.slice(offset, offset + PER_PAGE); };
    const handlePageClick = ({ selected }) => { setCurrentPage(selected); };
    useEffect(() => { const offsetValue = currentPage * PER_PAGE; setOffset(offsetValue); }, [currentPage]);



    // const pageCount = Math.ceil(1000 / PER_PAGE);
    // function handlePageClick({ selected: selectedPage }) {
    //     setCurrentPage(selectedPage);
    // }
    // const offset = currentPage * PER_PAGE;
    return (
        <>
            <div className="rounded-[10px]">

                <div className="card bg-white p-2 rounded-[10px] bg-[#FAFAFA] pt-[20px]">
                    <JobListingFilter />

                    <div className="job-listing-table-box -overflow-x-auto flex w-full">
                        {jobBoardData && jobBoardData?.length > 0 ?
                            <table className="table w-full text-[12px] ">
                                <thead className="">
                                    <tr className="border-0">
                                        <th className="font-bold text-[#000]"></th>
                                        <th className="font-bold text-[#000]"></th>
                                        <th className="font-bold text-[#000]"></th>
                                        <th className="font-bold text-[#000]"></th>
                                        <th className="font-bold text-[#000]"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {jobBoardData && jobBoardData?.length > 0 && getPaginatedJobs()?.map(item => (
                                        <>
                                            <tr className=" border-0 cursor-pointer under-shadow -w-[50vw] hover:scale-[1.01] " onClick={() => {
                                                setCurrentItem(item)
                                                setModal(true)
                                            }}>
                                                <td className="text-[16px] w-[5%] rounded-l-lg bg-[#FFCB05] text-center"><JobIcon /></td>
                                                <td className="text-[16px] w-[20%] font-bold cursor-pointer bg-white">{item?.company}</td>
                                                <td className="text-[16px] w-[20%] bg-white">{item?.displayTitle}</td>
                                                <td className="text-[16px] w-[20%] bg-white">{item?.formattedLocation}</td>
                                                <td colSpan={2} className="text-[16px] w-[20%] bg-white ">
                                                    <div className="grid gap-[8px]">
                                                        <ProgressBar Progress=
                                                            {
                                                                // item?.status
                                                                10
                                                            }
                                                        />
                                                        <div className="text-[12px] text-[#2E2D46]">Status: Applied</div>
                                                    </div>
                                                </td>

                                                {/* <td className="text-[16px] bg-white rounded-r-lg">
                                                <label className="inline-flex py-[5px] px-[8px] rounded-[8px] bg-[#FFCB05] cursor-pointer" onClick={() => setModal(true)} >View</label>
                                            </td> */}
                                            </tr>

                                            <tr className="border-0">
                                                <td colSpan={7} className="bg-[#FAFAFA] h-[12px] p-0"></td>
                                            </tr>
                                        </>
                                    ))}
                                </tbody>
                            </table> :
                            <div className="job-listing-table-box -overflow-x-auto flex w-full flex justify-center">
                                <span>No Record Found</span>
                            </div>
                        }
                    </div>

                </div>
                <div className="pagination-wrapper flex flex-row items-center justify-between mt-6  w-[100%] overflow-scroll">
                    {jobBoardData && jobBoardData?.length > 0 && <>

                        <div>
                            <span>
                                Showing {currentPage * PER_PAGE + 1} to {Math.min((currentPage + 1) * PER_PAGE, jobBoardData?.length)} of {jobBoardData?.length} entries
                            </span>
                        </div>
                        <div className="react-pagination">
                            <ReactPaginate
                                previousLabel={
                                    <ArrowRight />
                                }
                                nextLabel={<ArrowRight />}
                                pageCount={pageCount}
                                onPageChange={handlePageClick}
                                // containerClassName={styles.pagination}
                                // previousLinkClassName={styles.paginationLink}
                                // nextLinkClassName={styles.paginationLink}
                                // disabledClassName={styles.paginationDisabled}
                                // activeClassName={styles.paginationActive}
                                pageRangeDisplayed={2}
                                marginPagesDisplayed={1}
                            />
                        </div>
                    </>}
                </div>
            </div>

            <div className={`modal job-detail ${modal ? "modal-open" : ""}`}>
                <div className={`modal-box max-w-[1122px]`}>
                    <button className="btn btn-sm btn-circle absolute right-2 top-2" onClick={() => setModal(false)}>✕</button>
                    <div className="flex items-center justify-center w-[90px] h-[90px] rounded-[4px] bg-[#F8F8F8] mb-[20px]">
                        <img src={currentItem?.companyBrandingAttributes?.logoUrl} />
                    </div>
                    <div className="flex items-center justify-between mb-[15px]">
                        <h4 className="text-[16px] font-bold m-0">{currentItem?.company}</h4>
                        <div className="flex items-center gap-[15px]">
                            <span className="cursor-pointer hover:text-[#FFCB05]">
                                <GlobIcon />
                            </span>
                            <span className="cursor-pointer hover:text-[#FFCB05]">
                                <ShareIcon />
                            </span>
                            <span className="cursor-pointer hover:text-[#FFCB05]">
                                <BookmarkIcon />
                            </span>
                        </div>
                    </div>
                    <div className="flex items-center justify-between mb-[15px]">
                        <h4 className="text-[16px] font-bold m-0 underline">{currentItem?.formattedRelativeTime}</h4>
                        <p className="m-0">${currentItem?.extractedSalary?.max} - ${currentItem?.extractedSalary?.min} {currentItem?.extractedSalary?.type}</p>
                    </div>
                    <div className="">
                        <p className="m-0">{currentItem?.formattedLocation}</p>
                        <p className="m-0">{currentItem?.displayTitle}</p>
                        <div className="mt-3">
                            <p className="m-0">Posted 06/02/2024</p>
                            <p className="m-0">Closes 07/03/2024</p>
                        </div>
                    </div>
                    <div className="my-[30px]">
                        <button className="bg-[#FFCB05] rounded-[4px] py-[7px] px-[30px] hover:bg-[#FFCB05]">Apply</button>
                    </div>
                    <div className=" mb-[30px]">
                        {currentItem?.jobDescription}
                    </div>
                </div>
            </div>

        </>
    )
}

export default JobListing